name: CD

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    strategy:
      matrix:
        node-version: [18.x]
        python-version: [3.11]

    steps:
    - uses: actions/checkout@v4

    # Frontend Build and Deploy
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: '**/package-lock.json'

    - name: Install Frontend Dependencies
      working-directory: frontend
      run: npm ci

    - name: Build Frontend
      working-directory: frontend
      env:
        REACT_APP_API_URL: ${{ vars.API_URL }}
        REACT_APP_SENTRY_DSN: ${{ vars.SENTRY_DSN }}
      run: npm run build

    - name: Deploy Frontend to S3
      uses: jakejarvis/s3-sync-action@master
      with:
        args: --delete
      env:
        AWS_S3_BUCKET: ${{ vars.AWS_S3_BUCKET }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ vars.AWS_REGION }}
        SOURCE_DIR: 'frontend/build'

    # Backend Build and Deploy
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install Backend Dependencies
      working-directory: backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and Push Backend Docker Image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG backend/
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Deploy to ECS
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ vars.ECS_TASK_DEFINITION }}
        service: ${{ vars.ECS_SERVICE }}
        cluster: ${{ vars.ECS_CLUSTER }}
        wait-for-service-stability: true

    # Database Migrations
    - name: Run Database Migrations
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
      working-directory: backend
      run: alembic upgrade head

    # Notify Deployment
    - name: Create Sentry Release
      uses: getsentry/action-release@v1
      env:
        SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        SENTRY_ORG: ${{ vars.SENTRY_ORG }}
        SENTRY_PROJECT: ${{ vars.SENTRY_PROJECT }}
      with:
        environment: ${{ github.event.inputs.environment || 'production' }}
        version: ${{ github.sha }}

    - name: Notify Slack
      if: always()
      uses: 8398a7/action-slack@v3
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      with:
        status: ${{ job.status }}
        fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
        text: |
          Deployment to ${{ github.event.inputs.environment || 'production' }} ${{ job.status == 'success' && 'succeeded! ��' || 'failed! ❌' }} 