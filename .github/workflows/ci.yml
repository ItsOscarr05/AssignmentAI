name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x]
        python-version: [3.11]

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Frontend Setup and Tests
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: '**/package-lock.json'

    - name: Install Frontend Dependencies
      working-directory: frontend
      run: npm ci

    - name: Run Frontend Tests
      working-directory: frontend
      run: npm test -- --coverage
      env:
        REACT_APP_API_URL: http://localhost:8000

    - name: Upload Frontend Coverage
      uses: codecov/codecov-action@v4
      if: always()
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        flags: frontend
        directory: frontend/coverage
        fail_ci_if_error: true

    # Backend Setup and Tests
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install Backend Dependencies
      working-directory: backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Run Backend Tests
      working-directory: backend
      run: |
        pytest --cov=app --cov-report=xml
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        SECRET_KEY: test_secret_key
        ENVIRONMENT: test

    - name: Upload Backend Coverage
      uses: codecov/codecov-action@v4
      if: always()
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        flags: backend
        directory: backend
        fail_ci_if_error: true

    # Linting
    - name: Run Frontend Linting
      working-directory: frontend
      run: |
        npm run lint
        npm run type-check

    - name: Run Backend Linting
      working-directory: backend
      run: |
        flake8 .
        black --check .
        isort --check-only .
        mypy .

    # Security Scanning
    - name: Run Security Scan
      uses: snyk/actions/node@master
      if: ${{ github.event_name != 'pull_request' }}
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        command: monitor

    # Sentry Release
    - name: Create Sentry Release
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: getsentry/action-release@v1
      env:
        SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        SENTRY_ORG: ${{ vars.SENTRY_ORG }}
        SENTRY_PROJECT: ${{ vars.SENTRY_PROJECT }}
      with:
        environment: production
        version: ${{ github.sha }} 