"""Add OAuth fields to User model

Revision ID: 26e3cd6fbdc4
Revises: 6e301de2883e
Create Date: 2025-07-02 14:32:26.290938

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '26e3cd6fbdc4'
down_revision = '6e301de2883e'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('assignments', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('assignments', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('assignments', 'max_score',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=False)
    op.alter_column('assignments', 'status',
               existing_type=postgresql.ENUM('DRAFT', 'PUBLISHED', 'ARCHIVED', name='assignmentstatus'),
               nullable=False)
    op.alter_column('assignments', 'is_active',
               existing_type=sa.BOOLEAN(),
               nullable=False)
    op.alter_column('classes', 'description',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.add_column('feedback', sa.Column('feedback_type', sa.String(length=50), nullable=False))
    op.add_column('feedback', sa.Column('confidence_score', sa.Float(), nullable=True))
    op.alter_column('feedback', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('feedback', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.create_index('idx_feedback_type', 'feedback', ['feedback_type'], unique=False)
    op.alter_column('submissions', 'submitted_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.add_column('subscriptions', sa.Column('notified_token_thresholds', postgresql.ARRAY(sa.Integer()), nullable=True))
    op.add_column('users', sa.Column('oauth_provider', sa.String(), nullable=True))
    op.add_column('users', sa.Column('oauth_access_token', sa.String(), nullable=True))
    op.add_column('users', sa.Column('oauth_refresh_token', sa.String(), nullable=True))
    op.add_column('users', sa.Column('oauth_token_expires_at', sa.DateTime(), nullable=True))
    op.alter_column('users', 'is_active',
               existing_type=sa.BOOLEAN(),
               nullable=False)
    op.alter_column('users', 'is_verified',
               existing_type=sa.BOOLEAN(),
               nullable=False)
    op.alter_column('users', 'two_factor_enabled',
               existing_type=sa.BOOLEAN(),
               nullable=False)
    op.alter_column('users', 'is_superuser',
               existing_type=sa.BOOLEAN(),
               nullable=False)
    op.alter_column('users', 'failed_login_attempts',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    # Patch: Set updated_at to NOW() where it is NULL before making it NOT NULL
    op.execute("UPDATE users SET updated_at = NOW() WHERE updated_at IS NULL")
    op.alter_column('users', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('users', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True)
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('users', 'failed_login_attempts',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('users', 'is_superuser',
               existing_type=sa.BOOLEAN(),
               nullable=True)
    op.alter_column('users', 'two_factor_enabled',
               existing_type=sa.BOOLEAN(),
               nullable=True)
    op.alter_column('users', 'is_verified',
               existing_type=sa.BOOLEAN(),
               nullable=True)
    op.alter_column('users', 'is_active',
               existing_type=sa.BOOLEAN(),
               nullable=True)
    op.drop_column('users', 'oauth_token_expires_at')
    op.drop_column('users', 'oauth_refresh_token')
    op.drop_column('users', 'oauth_access_token')
    op.drop_column('users', 'oauth_provider')
    op.drop_column('subscriptions', 'notified_token_thresholds')
    op.alter_column('submissions', 'submitted_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.drop_index('idx_feedback_type', table_name='feedback')
    op.alter_column('feedback', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('feedback', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.drop_column('feedback', 'confidence_score')
    op.drop_column('feedback', 'feedback_type')
    op.alter_column('classes', 'description',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('assignments', 'is_active',
               existing_type=sa.BOOLEAN(),
               nullable=True)
    op.alter_column('assignments', 'status',
               existing_type=postgresql.ENUM('DRAFT', 'PUBLISHED', 'ARCHIVED', name='assignmentstatus'),
               nullable=True)
    op.alter_column('assignments', 'max_score',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=True)
    op.alter_column('assignments', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('assignments', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    # ### end Alembic commands ###
