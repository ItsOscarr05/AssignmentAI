version: "3.8"

services:
  backend:
    build:
      context: ..
      dockerfile: docker/Dockerfile.prod
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - REDIS_HOST=redis
      - ENVIRONMENT=production
    depends_on:
      - redis
    networks:
      - app_network
    deploy:
      resources:
        limits:
          cpus: "2"
          memory: 2G
      restart_policy:
        condition: on-failure
        max_attempts: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - app_network
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 1G

  celery_worker:
    build:
      context: ..
      dockerfile: docker/Dockerfile.prod
    command: celery -A backend.tasks worker --loglevel=info --pool=solo
    environment:
      - REDIS_HOST=redis
      - ENVIRONMENT=production
    depends_on:
      - redis
      - backend
    networks:
      - app_network
    deploy:
      resources:
        limits:
          cpus: "2"
          memory: 2G
      restart_policy:
        condition: on-failure
        max_attempts: 3

  flower:
    build:
      context: ..
      dockerfile: docker/Dockerfile.prod
    command: celery -A backend.tasks flower --port=5555
    ports:
      - "5555:5555"
    environment:
      - REDIS_HOST=redis
      - ENVIRONMENT=production
    depends_on:
      - redis
      - celery_worker
    networks:
      - app_network
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 512M

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./certbot/conf:/etc/letsencrypt:ro
      - ./certbot/www:/var/www/certbot:ro
    depends_on:
      - backend
    networks:
      - app_network
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 512M

  certbot:
    image: certbot/certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/usr/share/prometheus/console_libraries"
      - "--web.console.templates=/usr/share/prometheus/consoles"
    ports:
      - "9090:9090"
    networks:
      - app_network
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 1G

  grafana:
    image: grafana/grafana:latest
    volumes:
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=secure_password
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - app_network
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 1G

  node-exporter:
    image: prom/node-exporter:latest
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - "--path.procfs=/host/proc"
      - "--path.rootfs=/rootfs"
      - "--path.sysfs=/host/sys"
      - "--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)"
    ports:
      - "9100:9100"
    networks:
      - app_network
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 256M

volumes:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  app_network:
    driver: bridge
