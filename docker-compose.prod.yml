version: '3.8'

services:
  # Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - NODE_ENV=production
    restart: always
    env_file:
      - ./frontend/.env.production
    environment:
      - NODE_ENV=production
      - VITE_API_URL=https://api.assignmentai.app
      - STRIPE_PUBLISHABLE_KEY
    networks:
      - app-network
    depends_on:
      - backend
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.frontend.rule=Host(`assignmentai.app`)'
      - 'traefik.http.routers.frontend.entrypoints=websecure'
      - 'traefik.http.routers.frontend.tls=true'
      - 'traefik.http.routers.frontend.tls.certresolver=myresolver'

  # Backend Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        - NODE_ENV=production
    restart: always
    env_file:
      - ./backend/.env.production
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - SECRET_KEY
      - AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY
      - AWS_BUCKET_NAME=${AWS_S3_BUCKET}
      - OPENAI_API_KEY
      - STRIPE_SECRET_KEY
      - STRIPE_WEBHOOK_SECRET
      - GOOGLE_CLIENT_SECRET
      - GITHUB_CLIENT_SECRET
      - SMTP_PASSWORD
      - SENTRY_DSN
      - VITE_GOOGLE_CLIENT_ID
      - VITE_SENTRY_DSN=${SENTRY_DSN}
      - GA_TRACKING_ID
    networks:
      - app-network
    depends_on:
      - db
      - redis
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.backend.rule=Host(`api.assignmentai.app`)'
      - 'traefik.http.routers.backend.entrypoints=websecure'
      - 'traefik.http.routers.backend.tls=true'
      - 'traefik.http.routers.backend.tls.certresolver=myresolver'
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8000/health']
      interval: 30s
      timeout: 10s
      retries: 3

  # Database Service
  db:
    image: postgres:14-alpine
    restart: always
    env_file:
      - ./backend/.env.production
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    networks:
      - app-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 10s
      timeout: 5s
      retries: 5
    labels:
      - 'traefik.enable=false'

  # Redis Service
  redis:
    image: redis:6-alpine
    restart: always
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - app-network
    healthcheck:
      test: ['CMD', 'redis-cli', '-a', '${REDIS_PASSWORD}', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5
    labels:
      - 'traefik.enable=false'

  # Traefik Load Balancer
  traefik:
    image: traefik:v2.10
    restart: always
    ports:
      - '80:80'
      - '443:443'
    env_file:
      - ./backend/.env.production
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik:/etc/traefik
      - ./ssl:/ssl
    networks:
      - app-network
    command:
      - '--api.insecure=false'
      - '--providers.docker=true'
      - '--providers.docker.exposedbydefault=false'
      - '--entrypoints.web.address=:80'
      - '--entrypoints.websecure.address=:443'
      - '--certificatesresolvers.myresolver.acme.tlschallenge=true'
      - '--certificatesresolvers.myresolver.acme.storage=/etc/traefik/acme.json'
      - '--log.level=INFO'
    labels:
      - 'traefik.enable=false'

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    restart: always
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
    networks:
      - app-network
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.prometheus.rule=Host(`monitoring.assignmentai.app`)'
      - 'traefik.http.routers.prometheus.entrypoints=websecure'
      - 'traefik.http.routers.prometheus.tls=true'
      - 'traefik.http.routers.prometheus.tls.certresolver=myresolver'
      - 'traefik.http.routers.prometheus.middlewares=auth'

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    restart: always
    env_file:
      - ./backend/.env.production
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_SERVER_ROOT_URL=https://monitoring.assignmentai.app
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    networks:
      - app-network
    depends_on:
      - prometheus
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.grafana.rule=Host(`monitoring.assignmentai.app`) && PathPrefix(`/grafana`)'
      - 'traefik.http.routers.grafana.entrypoints=websecure'
      - 'traefik.http.routers.grafana.tls=true'
      - 'traefik.http.routers.grafana.tls.certresolver=myresolver'
      - 'traefik.http.routers.grafana.middlewares=auth'

  # Backup Service
  backup:
    image: postgres:14-alpine
    restart: 'no'
    env_file:
      - ./backend/.env.production
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
      - BACKUP_BUCKET
    volumes:
      - ./backups:/backups
    networks:
      - app-network
    command: |
      sh -c '
        pg_dump -h db -U $${POSTGRES_USER} -d $${POSTGRES_DB} > /backups/backup_$$(date +%Y%m%d_%H%M%S).sql
        aws s3 sync /backups s3://${BACKUP_BUCKET}/database-backups/
        find /backups -name "*.sql" -mtime +${BACKUP_RETENTION_DAYS} -delete
      '
    depends_on:
      - db
    labels:
      - 'traefik.enable=false'

  testenv:
    image: alpine
    env_file:
      - ./backend/.env.production
    command: sh -c 'env | grep -E "BACKUP_BUCKET|POSTGRES_DB|SENTRY_DSN"'

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
