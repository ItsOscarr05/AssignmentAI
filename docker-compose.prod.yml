version: '3.8'

services:
  # Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - NODE_ENV=production
    restart: always
    env_file:
      - ./frontend/.env.production
    environment:
      - NODE_ENV=production
      - VITE_API_URL=https://api.assignmentai.app
      - STRIPE_PUBLISHABLE_KEY
    networks:
      - app-network
    depends_on:
      - backend
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.frontend.rule=Host(`assignmentai.app`)'
      - 'traefik.http.routers.frontend.entrypoints=websecure'
      - 'traefik.http.routers.frontend.tls=true'
      - 'traefik.http.routers.frontend.tls.certresolver=myresolver'
      - 'traefik.http.services.frontend.loadbalancer.server.port=80'

  # Backend Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: always
    env_file:
      - ./backend/.env.production
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@db:5432/assignmentai
      - REDIS_URL=redis://redis:6379
    networks:
      - app-network
    depends_on:
      - db
      - redis
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.backend.rule=Host(`api.assignmentai.app`)'
      - 'traefik.http.routers.backend.entrypoints=websecure'
      - 'traefik.http.routers.backend.tls=true'
      - 'traefik.http.routers.backend.tls.certresolver=myresolver'
      - 'traefik.http.services.backend.loadbalancer.server.port=8000'

  # Database Service
  db:
    image: postgres:15-alpine
    restart: always
    environment:
      - POSTGRES_DB=assignmentai
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network

  # Redis Service
  redis:
    image: redis:7-alpine
    restart: always
    networks:
      - app-network

  # Traefik Service
  traefik:
    image: traefik:v2.10
    restart: always
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/traefik.yml:/etc/traefik/traefik.yml:ro
      - ./ssl:/ssl:ro
      - ./acme.json:/acme.json
    networks:
      - app-network
    labels:
      - 'traefik.enable=true'

  # Prometheus Service
  prometheus:
    image: prom/prometheus:latest
    restart: always
    ports:
      - '9090:9090'
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    networks:
      - app-network
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.prometheus.rule=Host(`monitoring.assignmentai.app`)'
      - 'traefik.http.routers.prometheus.entrypoints=websecure'
      - 'traefik.http.routers.prometheus.tls=true'
      - 'traefik.http.routers.prometheus.tls.certresolver=myresolver'
      - 'traefik.http.services.prometheus.loadbalancer.server.port=9090'

  # Grafana Service
  grafana:
    image: grafana/grafana:latest
    restart: always
    ports:
      - '3000:3000'
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - app-network
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.grafana.rule=Host(`monitoring.assignmentai.app`) && PathPrefix(`/grafana`)'
      - 'traefik.http.routers.grafana.entrypoints=websecure'
      - 'traefik.http.routers.grafana.tls=true'
      - 'traefik.http.routers.grafana.tls.certresolver=myresolver'
      - 'traefik.http.services.grafana.loadbalancer.server.port=3000'

volumes:
  postgres_data:
  grafana_data:

networks:
  app-network:
    driver: bridge
