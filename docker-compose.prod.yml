services:
  # Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - NODE_ENV=production
    restart: always
    env_file:
      - ./frontend/.env.production
    environment:
      - NODE_ENV=production
      - VITE_API_URL=https://api.assignmentai.app
      - STRIPE_PUBLISHABLE_KEY
    networks:
      - app-network
    depends_on:
      backend:
        condition: service_healthy
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.frontend.rule=Host(`assignmentai.app`)'
      - 'traefik.http.routers.frontend.entrypoints=websecure'
      - 'traefik.http.routers.frontend.tls=true'
      - 'traefik.http.routers.frontend.tls.certresolver=myresolver'
      - 'traefik.http.services.frontend.loadbalancer.server.port=80'

  # Backend Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: always
    env_file:
      - ./backend/.env.production
    environment:
      - ENVIRONMENT=production
      - REDIS_URL=redis://redis:6379
    volumes:
      - backend_uploads:/usr/src/app/uploads
      - backend_logs:/usr/src/app/logs
    networks:
      - app-network
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8000/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.backend.rule=Host(`api.assignmentai.app`)'
      - 'traefik.http.routers.backend.entrypoints=websecure'
      - 'traefik.http.routers.backend.tls=true'
      - 'traefik.http.routers.backend.tls.certresolver=myresolver'
      - 'traefik.http.services.backend.loadbalancer.server.port=8000'

  # Database Service
  db:
    image: postgres:16-alpine
    restart: always
    environment:
      - POSTGRES_DB=assignmentai
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=-E UTF8
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres -d assignmentai']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis Service
  redis:
    image: redis:7-alpine
    restart: always
    command: redis-server --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - app-network
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5

  # Traefik Service
  traefik:
    image: traefik:v3.0
    restart: always
    ports:
      - '8081:80'
      - '443:443'
      - '8082:8080' # Dashboard (optional, secure in production)
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/traefik.yml:/etc/traefik/traefik.yml:ro
      - ./ssl:/ssl:ro
      - ./acme.json:/acme.json
    networks:
      - app-network
    command:
      - --api.dashboard=false
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.myresolver.acme.tlschallenge=true
      - --certificatesresolvers.myresolver.acme.email=${ACME_EMAIL:-admin@assignmentai.app}
      - --certificatesresolvers.myresolver.acme.storage=/acme.json
    labels:
      - 'traefik.enable=true'

  # Prometheus Service
  prometheus:
    image: prom/prometheus:v2.50.1
    restart: always
    ports:
      - '9090:9090'
    volumes:
      - ./backend/prometheus:/etc/prometheus:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - app-network
    healthcheck:
      test:
        ['CMD', 'wget', '--no-verbose', '--tries=1', '--spider', 'http://localhost:9090/-/healthy']
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.prometheus.rule=Host(`monitoring.assignmentai.app`)'
      - 'traefik.http.routers.prometheus.entrypoints=websecure'
      - 'traefik.http.routers.prometheus.tls=true'
      - 'traefik.http.routers.prometheus.tls.certresolver=myresolver'
      - 'traefik.http.services.prometheus.loadbalancer.server.port=9090'

  # Grafana Service
  grafana:
    image: grafana/grafana:10.4.0
    restart: always
    ports:
      - '3000:3000'
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=https://monitoring.assignmentai.app/grafana
      - GF_SERVER_SERVE_FROM_SUB_PATH=true
    volumes:
      - grafana_data:/var/lib/grafana
      - ./backend/grafana:/etc/grafana/provisioning:ro
    networks:
      - app-network
    depends_on:
      prometheus:
        condition: service_healthy
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1',
        ]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.grafana.rule=Host(`monitoring.assignmentai.app`) && PathPrefix(`/grafana`)'
      - 'traefik.http.routers.grafana.entrypoints=websecure'
      - 'traefik.http.routers.grafana.tls=true'
      - 'traefik.http.routers.grafana.tls.certresolver=myresolver'
      - 'traefik.http.services.grafana.loadbalancer.server.port=3000'

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  grafana_data:
    driver: local
  prometheus_data:
    driver: local
  backend_uploads:
    driver: local
  backend_logs:
    driver: local

networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16
